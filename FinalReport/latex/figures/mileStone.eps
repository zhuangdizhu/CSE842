%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1171.000000 547.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1171 547
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1171 547
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /u put
dup 35 /r put
dup 36 /v put
dup 37 /e put
dup 38 /y put
dup 39 /space put
dup 40 /ampersand put
dup 41 /C put
dup 42 /o put
dup 43 /p put
dup 44 /s put
dup 45 /a put
dup 46 /c put
dup 47 /h put
dup 48 /M put
dup 49 /d put
dup 50 /l put
dup 51 /I put
dup 52 /m put
dup 53 /n put
dup 54 /t put
dup 55 /i put
dup 56 /T put
dup 57 /g put
dup 58 /O put
dup 59 /z put
dup 60 /two put
dup 61 /three put
dup 62 /zero put
dup 63 /A put
dup 64 /six put
dup 65 /one put
dup 66 /five put
dup 67 /P put
dup 68 /j put
dup 69 /W put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000386670676D00000000000000D400000428676C796600000000000004FC00001E286865616400000000000023240000003668686561000000000000235C00000024686D74780000000000002380000000A06C6F63610000000000002420000000526D617870000000000000247400000020707265700000000000002494000000FB14006D0085008D009C00000010004BFF0E0005020E00CA02110000140074006B0084008E007F009D00000011FF4A000D0205000E02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821









00>] def
/CharStrings 40 dict dup begin
/.notdef 0 def
/space 1 def
/ampersand 2 def
/zero 3 def
/one 4 def
/two 5 def
/three 6 def
/five 7 def
/six 8 def
/A 9 def
/C 10 def
/I 11 def
/M 12 def
/O 13 def
/P 14 def
/S 15 def
/T 16 def
/W 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/g 22 def
/h 23 def
/i 24 def
/j 25 def
/l 26 def
/m 27 def
/n 28 def
/o 29 def
/p 30 def
/r 31 def
/s 32 def
/t 33 def
/u 34 def
/v 35 def
/y 36 def
/z 37 def
/uni2B90 38 def
/uni2B91 39 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4258367 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DF6C6C4CAA4D4724D5FBE8DE875B8787096CC4B940CDD1EB776B4874EFDF41DEBCD96A91C4FFDDAB755A7363571B6DC5B517E68773D123EF3C3085F6F4257CA214ACAAC18CD4C8BA1BAE93F7456A409780F902C341D125B2AAE51FFC5C3C2B2735B21551DF7AFFB40C057ABBFA0B01679F017E2EC02FFCC9FCB433B01FB887C83E9A9C6943B71A9266729F0733A37DC2625AF9A7AC76179951958BC41811896F67654EE7E44E4A94960F0A8DF16806945493AE6ABA762376357B3026A92BC05695250F0AA6F2F7F6AD263DE5DEA70FCA9CE5EB92B3171FC34978E704169B2FFF559868D36F2ABC132F05A3088328F5120DE7CB2B9679A578CF7ACD7E85FE7442FCC1CF1E850E7640C15765E295DD670425C408B2E2FE0F79BB87ED2F8168CD7ADE03A082A34E593C178A2DAC5D1DE49D82524D05622748334EF3350C11B70291DE5167A13C813E489C1AB934C030A86DA1D021C3C8A2C62A9B77BA5250EE85635E619CCC8B2C2E9DE7DD349831EFE0C75C62F41FBFF79B12F5646D05977E85F15DBC5B8F131B275914AA4973720E5441440F95E8CA52BC73CA2FDC7A91D99F8B51546825256CB10C2D2AC14B685168D597E5D45EF24552B629B4910ED36FF730860AE356DB7DBFEC8CDE67BABF5748B24874D4C842D35EEC26BB932078508EE72C03DEA0BA45C5FCD4B1691CE825AAFF739BB760BF2D0091C5F192E8093C2D2A21CFB6D34563B291759BCBF0F73D4DE2B9AB67DE9389ECA5DEA6374DA5D60E44

0D8C547C4521B300B69083E8B4349C2CB28501650323659070C44ADFA46F01608A4F796C3745004DF1B5AA44F5BB59C5EB12822784F3DFFFA7CFA315BA2AA75CF83A161C3A623B6635ED788CBA92910FD6366C806D7136B4564A0A481D9DB046F72E83E8BB81EDCEC645CADA92868B8C49CC9723F6B5C04AA4062593F8F9020F80C6C06B84B164FA41610E6155AB711BD488E297A678D97B55D6A7546D473F06B76F08DCB0A972FBD59524B84AD2C8961E8923CB789B917E9107B500DBBB4259B7F175996B12B6801F630663503A8DC5EEECA3475964B3308C917E8B17F9BDA47426BAEE6D0C1369B100F696974EEBA7967300D6A375A460BB3440690DEAC210E6962BA2294AEAE807F7289D84BCCB51B26CECB733DC2802EA86871A5B3E31A0F31A032EC7F72FACB35A33BD582662988EE6A161BFFF0F03E79B21A3B38E8BFB719C21A1E2272C374D5A5C6CD9C3811FBADD921EB713FC8508BFF9EACFE92D6BD0CA9D402F92B2A6CF94B1FB19A46639A087A057C01C889E848025E09602EC9EE8504BF8097D9455B82625C11106A481C319ED40653CE1F43D59E39589DA4CF84FCBA9BAA7A6A4AED811ED36B52C7F6CEEF181136D4B4E396CAB766E63606874121E7C25B5743C552A94723F9C8EF18ACE0F967AD298E9E3DB6ECEC70DF469830ECB21AC2D241694EEB18AAAC31D2D2791068F7BE59276E382BDE607039C292B4F841D938F6C9E65F021DA0F34C832E781264688239B18B009C0F90DD7EC5630914D02507D289FCF75322BC9C78801DD78059274A3A9AE92D89F3B643F739B7737262ADF1A8CF1F834DA1DB11010B63C48543579AF05A365530982BA8CB8161E2A2FCE69A2C30F8C5AE242020B6CC86860FA8EA4DEC75B01C0E752F5F2F1396A333F7954366E646F61111D0EF484D6C236FBFDB44014CBEADDD86B1DA5253DCEA3BBFCE0F954112D2599D15C263ED841CB8BE6616213543A648A1DC3A6886FBF453FFF3C66701E838461E5C84C0372C1D549584ED7CE295CE7C1BE0B5C5E0459C9920102FDFC7EE8BA33D5284B7C6578DFC9F477921A7EA5CB6D4A5740B30896C4D247B80E58A8F35F2CF7E29305060C1A3BB164679CCF4FDBF32D10CB7C5C5E7216D90CF0930FF0F5FC8B8B7B3EB48F42ADD72C432B296907C00D84D48D3A20737CF32B9957A88C79DDCD707F4187F82245806210EFDB4C44121FF5612F3797A62861D1D01B44F2ED4CF496370B524ECC5A052F2AE655D80BCC12E86E60CA620B21402E41EC6D2E0299223E43BF738959937078B080D717E15347D5A9AD5B8FF3921115357AEF11F2B915CAB7318F53353A5D23D6CB36603A84A3E768231F49F8447417126EB196E7474A053741A3B166CE6820E7DB573F742B7C9F298A453D03C44B003C9ACCD2FAA736DFE63D2B05B4627EA8B9B1AAE3ABF0E30D3EF5F50F



69E940F378356B9A5849EC2A50BF492F099CA7EED9D4F2F4D6C0CF99A948928F19B4C124C558DFABA58227CD4553A99F69E857B51592540918A20C488293AD693FFB23F26CC4718C340B09B5E1C732746317C40FB80529DAFFA95CABB4D70E1FDE8FFF8828C0E726AB5267756A509D41F1A1861CDFACC3F30EA7958AA274DD53624BFD186D144828835595844C96F0F2E20098E5CA5C1CB722719BE1B3CCF7687FE3218F0A131535230DC862A5A3365F027F96553243612E894B2055E34B155795456ACB32B51B9ACBA2646A8B2E726A82AA99AA5BE5EA560E0F4C76C0B3273A963E069B85CDE05D0267833E2257559641FBC21A8822A30ED1FF2696A69BD5F64BA0875B1CE21B3B1DBF672DD4172794AD12A8FFE2580680E0B828AC0A070C328DF3644E2A959A8BD3B716C4362742DA81E5E30E7DFA2E360D6AD9432D7EC38CFF6BE2CA9F6656EBF77D63381A15F88E12F16F844CB2EBC781D62CA8F235AE1BCB54437F9DF4F0BD42F261E9E029DF56B98CFC49542CFC974E9F2749309B0A94CE375CEE608985C5589E3385549347A52FC30EC5F68058B185D911966CC4EA071B42660C6FACE494EE1853ECBAC6239FC606103D27C43FF84116ED1737BA9A5666A4A64F98B935DA1D08BC6FD338697909A7C845A84AFBAE300E6D1025CB92CE5EF456B111FF198C8F7D63D53BFDCE144794F02C0281CBCA46439E315B862CB9E11A3311B49F75CABC5A9BC4744A5F9DF8103FD2D619DC1B7B4EF07755FD40647B5A7DB54C43BD8257B9735273D5BC75945FEA8040ACDBF14A4993D638114E44F8F2DF26654BF5C6D0E6CF5DEBFDD1DB49F10344564CC8F1925DCAD3B5632697F0B3BC080E33C80D5789E58483A8F1EE74AF3108A2F38566FD5226E79E38CC6F987E3CDC3538F94658F7025E5956A1FFEE2AFC10B9FAE7ED6D701AAD46A6A53071A2512134B4E6C5BDF34DFA71F5BFD7C09A29126379A10DEC168CCB35F3D9956096E2422BD4F67A88E0EF9E114ABDB50C67E782497E5A7AFBF0DE2441061E863F0280612CDB475F1E7931C6D030A4818C880DDB95F58571FC051263F4CE3DC02B75AFB7D661D9F5913C080013208A59453753635BCAB7FAE815525D6FFD4F38934DD37C16D0A6AFDA71DF106CDA86EFD92E1EF8DA47CFFFA6980EF7A2B3C8623901C22F14519DF6597521E13587F3F77A36CD3B5642A5EC7DAD17C1A0A01D846BF856395FD979E683C89121DE138A8CC4714A6D77FB492438245DC8A323E8AC973663AF38DB621CBABFB07ECBE7615531F3C32AB7FB1D0A99AE41F939ED58A73DC0D64431F12C138EA5E83BEB46E6E4232FD0034428B48735B9D9B4BBC1252065B7B9F12F13534022C5F1BEF2C989FCF8CEEA680C1BBC9EAB336877BB6149F021401FF757B6A276AF6AA2DF4574E1864707D2F3BD17F4D9596BEFE0F380453E
9587531568D56EF2AC9AD7880C0A93EC09922E4D41422634DC79F12DA2D7D636B10DF836F8D73A17D1E3BC8A8D6CB186EB7D072892BF9A9430C2C7FB876C69BCF2FEE9833392FC165C0A08360DF69DBA6DC227D2EEC1A285498D091792AC0C99D149859B75F79181716BE6DF91BCE44DDC7FA081A9C72AE7D9C12F9729EA60835123B850C60D6E82AD30C9E87880DB49FAFCC0C02E262EBF9EAF57607B1CFF80AED43C44469A4810EAEB18E18FDC6F9FEE45BD20C07B2EB0ED2B126B1715DFE092E92573D5EEBA194466B785CBE6E8F4415ED7D90DD73C5915F80490C109205D97F23FBC4EA41CC9816DE0C1F914106933C7E9AB8DAB18FBE3CC2454E2FFFF20D50DFE0626AA5E3261DB0558336873D78DBDD509DEA10D8B21E42A4964DF3226B9EF368C028E9511DBC7DDFCA0D2D7C6478659B6FEB472FD1008F33FFF4118557C3F1817101D57DC85F2181F035242F79CFA800EED430E76338007F4461EA0C19FB267694E6642AF87F33F79F86060E78DAFE5349E8F53E9F9522DA54E1130CA0BDF72BD567D81ECC45831EF061D8CF212BFEA10AFE2199453AA3868C56A3EA206EF92FCF6EEA30CFCD0EADA75E9C148EA563A0EA36DBC72D99E72D3EC18EC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1171 547 rc
0 547 m
1171 547 l
1171 -105 l
0 -105 l
h
0 547 m
f
6 461 m
1167 461 l
1167 4 l
6 4 l
h
6 461 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
6 86 m
1167 86 l
1167 543 l
6 543 l
h
6 86 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 228.5 318.5 cm
/F1.1[ 22 0 0 -22 0 0]sf
-127.38 7.6809235 m
(!"#$%&'\('\)*#+",'!%-#./)[ 14.278000 13.046000 8.558000 11.440000 12.628000 11.418000 6.116000 15.070000 6.116000 16.302000 13.442000 8.558000 13.442000 13.046000 11.814000 6.116000 14.278000 12.628000 12.628000 8.162000 12.628000 0.000000 ] xS
1 0 0 -1 232.82896 231.34058 cm
-117.656 7.6809235 m
(0*1%2'34+2%4%56-67*5)[ 19.954000 13.442000 13.442000 12.628000 5.676000 6.116000 6.490000 19.932000 13.442000 5.676000 12.628000 19.932000 12.628000 13.046000 7.744000 12.628000 7.744000 5.676000 13.442000 0.000000 ] xS
1 0 0 -1 198 150.2619 cm
-153.72501 7.6809235 m
(0*1%2'8%,6759'\(':+6747;-67*5)[ 19.954000 13.442000 13.442000 12.628000 5.676000 6.116000 11.000000 12.628000 11.814000 7.744000 5.676000 13.046000 13.442000 6.116000 15.070000 6.116000 17.116000 13.442000 7.744000 5.676000 19.932000 5.676000 11.418000 12.628000 7.744000 5.676000 13.442000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
401.0303 410 m
400.0303 410 l
400.0303 21 l
401.0303 21 l
h
401.0303 410 m
f
3 w
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
401.0303 137 m
400.0303 137 l
400.0303 526 l
401.0303 526 l
h
401.0303 137 m
S
0 i
1 1 1 sc
CM
503.5 410 m
502.5 410 l
502.5 21 l
503.5 21 l
h
503.5 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
503.5 137 m
502.5 137 l
502.5 526 l
503.5 526 l
h
503.5 137 m
S
0 i
1 1 1 sc
CM
614.50427 410 m
613.50427 410 l
613.50427 21 l
614.50427 21 l
h
614.50427 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
614.50427 137 m
613.50427 137 l
613.50427 526 l
614.50427 526 l
h
614.50427 137 m
S
0 i
1 1 1 sc
CM
726.46161 410 m
725.46161 410 l
725.46161 21 l
726.46161 21 l
h
726.46161 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
726.46161 137 m
725.46161 137 l
725.46161 526 l
726.46161 526 l
h
726.46161 137 m
S
0 i
1 1 1 sc
CM
830.15546 410 m
829.15546 410 l
829.15546 21 l
830.15546 21 l
h
830.15546 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
830.15546 137 m
829.15546 137 l
829.15546 526 l
830.15546 526 l
h
830.15546 137 m
S
0 i
1 1 1 sc
CM
921.25 410 m
920.25 410 l
920.25 21 l
921.25 21 l
h
921.25 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
921.25 137 m
920.25 137 l
920.25 526 l
921.25 526 l
h
921.25 137 m
S
0 i
1 1 1 sc
CM
1068 410 m
1067 410 l
1067 21 l
1068 21 l
h
1068 410 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
1068 137 m
1067 137 l
1067 526 l
1068 526 l
h
1068 137 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 393.65216 427.5 cm
/F1.1[ 20 0 0 -20 0 0]sf
-35.380001 7.7099304 m
(0-#''<<)[ 18.140000 11.480000 7.780000 5.560000 5.560000 11.120000 0.000000 ] xS
1 0 0 -1 507.85968 427.5 cm
-32.599998 7.7099304 m
(0-#'=>)[ 18.140000 11.480000 7.780000 5.560000 11.120000 0.000000 ] xS
1 0 0 -1 614.00427 427.5 cm
-25.190001 7.7099304 m
(?+#'@)[ 13.700000 12.220000 7.780000 5.560000 0.000000 ] xS
1 0 0 -1 724.49799 427.5 cm
-30.75 7.7099304 m
(?+#'A=)[ 13.700000 12.220000 7.780000 5.560000 11.120000 0.000000 ] xS
1 0 0 -1 828.26904 427.5 cm
-30.75 7.7099304 m
(?+#'<>)[ 13.700000 12.220000 7.780000 5.560000 11.120000 0.000000 ] xS
1 0 0 -1 922.33728 427.5 cm
-30.75 7.7099304 m
(?+#'<@)[ 13.700000 12.220000 7.780000 5.560000 11.120000 0.000000 ] xS
1 0 0 -1 1060.0184 427.5 cm
-36.68 7.7099304 m
(0-&''>B)[ 18.140000 11.480000 10.380000 5.560000 5.560000 11.120000 0.000000 ] xS
/Cs1 SC
0 0.74901962 0.75294119 sc
CM
408.71429 332.7619 m
533.71429 332.7619 l
533.71429 302.7619 l
408.71429 302.7619 l
h
408.71429 332.7619 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
408.71429 214.2381 m
533.71429 214.2381 l
533.71429 244.2381 l
408.71429 244.2381 l
h
408.71429 214.2381 m
S
0 i
0 0.74901998 0.75294101 sc
CM
753.0069 164.96428 m
958.33728 164.96428 l
958.33728 134.96428 l
753.0069 134.96428 l
h
753.0069 164.96428 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
753.0069 382.03571 m
958.33728 382.03571 l
958.33728 412.03571 l
753.0069 412.03571 l
h
753.0069 382.03571 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 205.55267 75.978264 cm
/F1.1[ 22 0 0 -22 0 0]sf
-141.55901 7.6809235 m
(C#*D%.6'!"44-#&'\('E#76759)[ 14.674000 8.162000 13.442000 6.116000 12.628000 12.628000 7.744000 6.116000 14.278000 13.046000 19.932000 19.932000 12.628000 8.558000 11.418000 6.116000 15.070000 6.116000 20.372000 8.558000 5.676000 7.744000 5.676000 13.046000 0.000000 ] xS
/Cs1 SC
0 0.74901998 0.75294101 sc
CM
517.38098 247.38095 m
782.38098 247.38095 l
782.38098 217.38095 l
517.38098 217.38095 l
h
517.38098 247.38095 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
517.38098 299.61905 m
782.38098 299.61905 l
782.38098 329.61905 l
517.38098 329.61905 l
h
517.38098 299.61905 m
S
0 i
0 0.74901998 0.75294101 sc
CM
925 60 m
1068 60 l
1068 30 l
925 30 l
h
925 60 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 547 cm
925 487 m
1068 487 l
1068 517 l
925 517 l
h
925 487 m
S
ep
end
%%Trailer
%%EOF
